{"version":3,"sources":["Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Dashboard","useState","hours","setHours","minutes","setMinutes","timeOfDay","setTimeOfDay","ampm","setAmPm","dayName","setDayName","day","setDay","month","setMonth","useEffect","interval","setInterval","date","Date","nextHours","getHours","nextMin","getMinutes","nextDay","getDay","nextDate","getDate","nextMonth","getMonth","toString","padStart","clearInterval","className","style","backgroundImage","title","icon","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8PAgFeA,MA5Ef,WAEI,IAGA,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA8BR,mBAAS,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAsBV,mBAAS,IAA/B,mBAAOW,EAAP,KAAYC,EAAZ,KACA,EAA0BZ,mBAAS,IAAnC,mBAAOa,EAAP,KAAcC,EAAd,KA6CA,OA3CAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzB,IAAMC,EAAO,IAAIC,KACXC,EAAYF,EAAKG,WACvBnB,EAASkB,GACT,IAAME,EAAUJ,EAAKK,aACrBnB,EAAWkB,GACX,IAAME,EAAUN,EAAKO,SACrBf,EAAWc,GACX,IAAME,EAAWR,EAAKS,UACtBf,EAAOc,GACP,IAAME,EAAYV,EAAKW,WACvBf,EAASc,GAELR,EAAY,IACM,IAAdA,GACAlB,EAASkB,EAAU,IAEvBd,EAAa,WACbE,EAAQ,OACDY,GAAa,IAAMA,EAAY,IACpB,KAAdA,GACAlB,EAASkB,EAAU,IAEvBd,EAAa,aACbE,EAAQ,QAERN,EAASkB,EAAU,IACnBd,EAAa,WACbE,EAAQ,OAGRc,EAAU,IACVlB,EAAWkB,EAAQQ,WAAWC,SAAS,EAAG,QAG/C,KACH,OAAO,WACLC,cAAchB,MAEf,CAACf,IAIF,sBAAKgC,UAAU,qBAAqBC,MAAO,CAACC,gBAAgB,OAAD,OAvDhD,oDAuDgD,MAA3D,UACI,qBAAKF,UAAU,mDAAf,SACI,qBAAIA,UAAU,2DAAd,kBAA+E5B,EAA/E,kBAEJ,sBAAK4B,UAAU,gEAAf,UACI,qBAAIA,UAAU,gEAAd,UAA+EhC,EAA/E,IAAuFE,EAAvF,IAAiGI,KACjG,qBAAI0B,UAAU,6CAAd,UA3DC,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YA2DHxB,GAAjE,KA5DG,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YA4D9BI,GAApF,IAA6FF,QAEjG,qBAAKsB,UAAU,yFAAf,SACI,wBAAQA,UAAU,0BAA0BG,MAAM,aAAlD,SACI,+BACI,cAAC,IAAD,CAAMH,UAAU,sDAAsDI,KAAK,sCC3DpFC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.aeb66555.chunk.js","sourcesContent":["import './css/Dashboard.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { Icon } from '@iconify/react';\r\n\r\nfunction Dashboard() {\r\n\r\n    const imgSrc = \"https://source.unsplash.com/1920x1080/daily?beach\";\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; \r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const [hours, setHours] = useState(null);\r\n    const [minutes, setMinutes] = useState(null);\r\n    const [timeOfDay, setTimeOfDay] = useState(\"\");\r\n    const [ampm, setAmPm] = useState(\"\");\r\n    const [dayName, setDayName] = useState(\"\");\r\n    const [day, setDay] = useState(\"\");\r\n    const [month, setMonth] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const date = new Date();\r\n            const nextHours = date.getHours();\r\n            setHours(nextHours);\r\n            const nextMin = date.getMinutes();\r\n            setMinutes(nextMin);\r\n            const nextDay = date.getDay();\r\n            setDayName(nextDay);\r\n            const nextDate = date.getDate();\r\n            setDay(nextDate);\r\n            const nextMonth = date.getMonth();\r\n            setMonth(nextMonth);\r\n\r\n            if (nextHours < 12) {\r\n                if (nextHours === 0) {\r\n                    setHours(nextHours+12);\r\n                }\r\n                setTimeOfDay(\"Morning\");\r\n                setAmPm(\"AM\");\r\n            } else if (nextHours >= 12 && nextHours < 17) {\r\n                if (nextHours !== 12) {\r\n                    setHours(nextHours-12);\r\n                }\r\n                setTimeOfDay(\"Afternoon\");\r\n                setAmPm(\"PM\");\r\n            } else {\r\n                setHours(nextHours-12);\r\n                setTimeOfDay(\"Evening\");\r\n                setAmPm(\"PM\");\r\n            }\r\n\r\n            if (nextMin < 10) {\r\n                setMinutes(nextMin.toString().padStart(2, '0'))\r\n            }     \r\n\r\n        }, 500);\r\n        return () => {\r\n          clearInterval(interval);\r\n        };\r\n      }, [hours]);\r\n\r\n   \r\n    return(\r\n        <div className=\"bg background-tint\" style={{backgroundImage: `url(${imgSrc})`}}>\r\n            <div className=\"h-full flex flex-col items-center justify-center\">\r\n                <h1 className=\"text-3xl text-white 2xl:text-8xl lg:text-7xl md:text-5xl\">Good {timeOfDay}, Blessly!</h1>\r\n            </div>\r\n            <div className=\"flex flex-col float-left justify-center left-0 bottom-0 fixed\">\r\n                <h1 className=\"text-3xl 2xl:text-6xl lg:text-5xl md:text-5xl text-white px-4\">{hours}:{minutes} {ampm}</h1>\r\n                <h1 className=\"text-2xl 2xl:text-4xl text-white px-4 py-4\">{days[dayName]}, {months[month]} {day}</h1>\r\n            </div>\r\n            <div className=\"flex flex-row float-right justify-center items-center right-0 bottom-0 fixed px-4 py-4\">\r\n                <button className=\"border-0 rounded-xl p-2\" title=\"View Notes\" >\r\n                    <span>\r\n                        <Icon className=\"text-white opacity-50 hover:drop-shadow-sm text-4xl\" icon=\"fa-solid:clipboard-list\" />\r\n                    </span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard","import './css/App.css';\nimport Dashboard from './Dashboard.js'\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}